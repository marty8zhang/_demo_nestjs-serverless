# "org" ensures this Service is used with the correct Serverless Framework
# Access Key.
org: marty8zhang
# "app" enables Serverless Framework Dashboard features and sharing them with
# other Services.
app: demo-nestjs-serverless
# "service" is the name of this project. This will also be added to your AWS
# resource names.
service: demo-nestjs-serverless

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-southeast-2
#  timeout: 10

functions:
  main:
    handler: dist/main.handler
    events:
      - http:
          method: ANY
          path: /
      - http:
          method: ANY
          path: '{proxy+}'
    # Gives the Lambda function access to resources in the AWS VPC, which hosts
    # a MongoDB server within a private EC2 instance.
    vpc:
      subnetIds:
        - ${env:AWS_VPC_SUBNET_ID_PUBLIC_ONE}
        - ${env:AWS_VPC_SUBNET_ID_PUBLIC_TWO}
      securityGroupIds:
        - ${env:AWS_SG_ID_LAMBDA}
    environment:
      DB_HOST: ${self:custom.db-credentials.host}
      DB_PORT: ${self:custom.db-credentials.port}
      DB_USERNAME: ${self:custom.db-credentials.username}
      DB_PASSWORD: ${self:custom.db-credentials.password}
      DB_DBNAME: ${self:custom.db-credentials.dbname}
      EGGHDZ_V1_ADDRESS: ${env:AWS_EC2_IP_PRIVATE_EGGHDZ_V1}

package:
  # AWS Lambda 101: Reduce the upload package size by excluding unnecessary
  # folders/files to prevent the error of
  # "Unzipped size must be smaller than 262144000 bytes".
  # In this demo project, only files in `dist/` are needed.
  patterns:
    - '!./**'
    - 'dist/**'

resources:
  # Note: In a real-world scenario, infrastructure resources like below should
  # be managed separately, e.g., in a separate `serverless.yml` or even a
  # separate repository. They're only included here for the purposes of demoing
  # and providing a quicker way to spin up the demo environment.
  Resources:
    # The following resources provide Internet access to a private subnet by
    # doing these things (see `docs/public-nat-gateway.drawio`):
    #   - Create a public NAT gateway (`PublicNatGateway`) in an existing public
    #     subnet.
    #   - `PublicNatGatewayEIP` allows the gateway to be allocated with a public
    #     IP address, hence make it public.
    #   - Create a network route table (`RouteTableUsingPublicNatGateway`) in an
    #     existing VPC.
    #   - Create a network route (`InternetAccessRoute`), which points to the
    #     public NAT gateway, within the route table.
    #   - `SubnetRouteTableAssociation` associates the route table with an
    #     existing private subnet which previously doesn't have Internet access.
    # Note: All subnets mentioned here belong to the same VPC.
    PublicNatGateway:
      Type: AWS::EC2::NatGateway
      Properties:
        SubnetId: ${env:AWS_VPC_SUBNET_ID_PUBLIC_TWO}
        AllocationId: !GetAtt PublicNatGatewayEIP.AllocationId
    PublicNatGatewayEIP:
      Type: AWS::EC2::EIP
      Properties: { }
    RouteTableUsingPublicNatGateway:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: ${env:AWS_VPC_ID}
    InternetAccessRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref RouteTableUsingPublicNatGateway
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref PublicNatGateway
    SubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref RouteTableUsingPublicNatGateway
        SubnetId: ${env:AWS_VPC_SUBNET_ID_PRIVATE_ONE}

custom:
  db-credentials: ${aws:ssm:/aws/reference/secretsmanager/${env:AWS_SM_SECRET_ID_DATABASE}}
  serverless-offline:
    # A workaround for the "Cannot GET/POST/... null" issue when hitting the
    # root url. With this flag turn on, there'll be no stage tag in the URLs
    # when the service is started with `serverless offline`. E.g., with the
    # flag off (default), `GET http://localhost:3000/dev/`; with it on,
    # `GET http://localhost:3000/`.
    # See:
    #   - https://github.com/dougmoscrop/serverless-http/issues/86
    #   - https://github.com/dherault/serverless-offline?tab=readme-ov-file#noprependstageinurl
    noPrependStageInUrl: true
